#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
int jumpOverPiece1(char Board[][57], int piece[], int length, int sw);
int jumpOverPiece2(char Board[][57], int piece[], int length, int sw);
int isWallPlacementValid(char Board[][57], int piece[], int sw, int rowWall, int colWall, char direction, int length);
void putWalls(char Board[][57], int rowWall, int colWall, char direction){
    if (direction == 'h' || direction == 'H'){
        int row = 4 * (rowWall + 1);
        int col = 4 * colWall + 1;
        for (int count = 0; count < 7; count++){
            Board[row][col] = '#';
            col++;
        }
    }
    else if (direction == 'v' || direction == 'V'){
        int row = 4 * rowWall + 1;
        int col = 4 * (colWall + 1);
        for (int count = 0; count < 7; count++){
            Board[row][col] = '#';
            row++;
        }
    }
}

void Delete(char Board[][57], int rowWall, int colWall, char direction){
    if (direction == 'h' || direction == 'H'){
        int row = 4 * (rowWall + 1);
        int col = 4 * colWall + 1;
        for (int count = 1; count <= 7; count++){
            if(count != 4) {
                Board[row][col] = '.';
            }
            else {
                if (Board[row + 1][col] != '#' || Board[row - 1][col] != '#'){
                    Board[row][col] = '.';
                }
            }
            col++;
        }
    }
    else if (direction == 'v' || direction == 'V'){
        int row = 4 * rowWall + 1;
        int col = 4 * (colWall + 1);
        for (int count = 1; count <= 7; count++){
            if(count != 4) {
                Board[row][col] = '.';
            }
            else {
                if (Board[row][col + 1] != '#' || Board[row][col - 1] != '#'){
                    Board[row][col] = '.';
                }
            }
            row++;
        }
    }
}
void player(char Board[][57], int piece[], int sw, int length, int countWalls[][1]){
    int valueble_break = 0;
    while(valueble_break == 0){
        //printf("\n%d\n", jumpOverPiece(Board, piece, length, sw));
        HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
        char option;
        SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_RED);
        printf("Player %d : ", sw + 1);
        SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE);
        printf("Do you want to move your piece (P) or if you want to move walls(W)? ");
        //printf("%d", sw);
        scanf("\r%c", &option);
        if (option == 'P' || option == 'p') {

            while (1) {
                SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE);
                printf("How do you want to move your piece ? ");
                char movement;
                scanf("\r%c", &movement);
                if (movement == 'W' || movement == 'w') {
                    if(jumpOverPiece1(Board, piece, length, sw) == 1){
                        piece[sw * 2] -= 2;
                        valueble_break = 1;
                        break;
                    }
                    else if(jumpOverPiece2(Board, piece, length, sw) == 1) {
                        printf("Up and right (E/e) or up and left(Q/q) : ");
                        scanf("\r%c", &movement);
                        if (movement == 'E' || movement == 'e') {//rigth piece
                            if ((piece[sw * 2 + 1] + 1 <= length - 1) && (piece[sw * 2] - 1 >= 0) &&
                                Board[4 * (piece[sw * 2] - 1) + 2][4 * piece[sw * 2 + 1] + 2 + 2] != '#') {
                                piece[sw * 2]--;
                                piece[sw * 2 + 1]++;
                                valueble_break = 1;
                                break;
                            }
                        } else if (movement == 'Q' || movement == 'q') {//left piece
                            if ((piece[sw * 2 + 1] - 1 >= 0) && piece[sw * 2] - 1 >= 0 &&
                                Board[4 * (piece[sw * 2] - 1) + 2][4 * piece[sw * 2 + 1]] != '#') {
                                piece[sw * 2]--;
                                piece[sw * 2 + 1]--;
                                valueble_break = 1;
                                break;
                            }
                        }
                        else {
                            SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                            printf("\aInvalid input!!Please try again.");
                            continue;
                        }
                    }
                    else if (piece[sw * 2] - 1 >= 0 && Board[4 * piece[sw * 2] + 2 - 2][4 * piece[sw * 2 + 1] + 2] != '#' && Board[4 * piece[sw * 2] + 2 - 4][4 * piece[sw * 2 + 1] + 2] == '.') {
                        piece[sw * 2]--;
                        valueble_break = 1;
                        break;
                    } else {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                        printf("\aError!!Con not move in that direction.Please try again.\n");
                        continue;
                    }
                } else if (movement == 'S' || movement == 's') {
                    if(jumpOverPiece1(Board, piece, length, sw) == 2){
                        piece[sw * 2] += 2;
                        valueble_break = 1;
                        break;
                    }
                    else if(jumpOverPiece2(Board, piece, length, sw) == 2){
                        printf("Down and right (E/e) or down and left(Q/q) : ");
                        scanf("\r%c", &movement);
                        if (movement == 'E' || movement == 'e') {
                            if ((piece[sw * 2 + 1] + 1 <= length - 1) && (piece[sw * 2] + 1 < length) &&
                                Board[4 * (piece[sw * 2] + 1) + 2][4 * piece[sw * 2 + 1] + 2 + 2] != '#') {
                                piece[sw * 2]++;
                                piece[sw * 2 + 1]++;
                                valueble_break = 1;
                                break;
                            }
                        }else if (movement == 'Q' || movement == 'q') {//left piece
                            if ((piece[sw * 2 + 1] - 1 >= 0) && piece[sw * 2] + 1 < length &&
                                Board[4 * (piece[sw * 2] + 1) + 2][4 * piece[sw * 2 + 1]] != '#') {
                                piece[sw * 2]++;
                                piece[sw * 2 + 1]--;
                                valueble_break = 1;
                                break;
                            }
                        }
                        else {
                            SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                            printf("\aInvalid input!!Please try again. ");
                            continue;
                        }
                    }
                    else if ((piece[sw * 2] + 1 <= length - 1) &&
                             (Board[4 * piece[sw * 2] + 2 + 2][4 * piece[sw * 2 + 1] + 2] != '#') && Board[4 * piece[sw * 2] + 2 + 4][4 * piece[sw * 2 + 1] + 2] == '.') {
                        piece[sw * 2]++;
                        valueble_break = 1;
                        break;
                    } else {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                        printf("\aError!!Con not move in that direction.Please try again.\n");
                        continue;
                    }
                } else if (movement == 'D' || movement == 'd') {
                    if(jumpOverPiece1(Board, piece, length, sw) == 3){
                        piece[sw * 2 + 1] += 2;
                        valueble_break = 1;
                        break;
                    }
                    else if(jumpOverPiece2(Board, piece, length, sw) == 3){
                        printf("Right and down (E/e) or right and up(Q/q) : ");
                        scanf("\r%c", &movement);
                        if (movement == 'E' || movement == 'e') {
                            if ((piece[sw * 2 + 1] + 1 <= length - 1) && (piece[sw * 2] + 1 < length) &&
                                Board[4 * piece[sw * 2] + 2 + 2][4 * (piece[sw * 2 + 1] + 1) + 2] != '#') {
                                piece[sw * 2]++;
                                piece[sw * 2 + 1]++;
                                valueble_break = 1;
                                break;
                            }
                        }else if (movement == 'Q' || movement == 'q') {//left piece
                            if ((piece[sw * 2 + 1] - 1 >= 0) && piece[sw * 2] - 1 >= 0 &&
                                Board[4 * (piece[sw * 2] + 1) + 2 - 2][4 * piece[sw * 2 + 1] + 2] != '#') {
                                piece[sw * 2]--;
                                piece[sw * 2 + 1]++;
                                valueble_break = 1;
                                break;
                            }
                        }
                        else {
                            SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                            printf("\aInvalid input!!Please try again. ");
                            continue;
                        }

                    }
                    else if ((piece[sw * 2 + 1] + 1 <= length - 1) &&
                             (Board[4 * piece[sw * 2] + 2][4 * piece[sw * 2 + 1] + 2 + 2] != '#') && Board[4 * piece[sw * 2] + 2][4 * piece[sw * 2 + 1] + 2 + 4] == '.') {
                        piece[sw * 2 + 1]++;
                        valueble_break = 1;
                        break;
                    } else {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                        printf("\aError!!Con not move in that direction.Please try again.\n");
                        continue;
                    }
                } else if (movement == 'A' || movement == 'a') {
                    if(jumpOverPiece1(Board, piece, length, sw) == 4){
                        piece[sw * 2 + 1] -= 2;
                        valueble_break = 1;
                        break;
                    }
                    else if(jumpOverPiece2(Board, piece, length, sw) == 4){
                        printf("Left and up (E/e) or left and down(Q/q) : ");
                        scanf("\r%c", &movement);
                        if (movement == 'E' || movement == 'e') {
                            if ((piece[sw * 2 + 1] - 1 >= 0) && (piece[sw * 2] - 1 >= 0) &&
                                Board[4 * piece[sw * 2] + 2 - 2][4 * (piece[sw * 2 + 1] - 1) + 2] != '#') {
                                piece[sw * 2]--;
                                piece[sw * 2 + 1]--;
                                valueble_break = 1;
                                break;
                            }
                        }else if (movement == 'Q' || movement == 'q') {//left piece
                            if ((piece[sw * 2 + 1] + 1 < length) && piece[sw * 2] - 1 >= 0 &&
                                Board[4 * piece[sw * 2] + 2 + 2][4 * (piece[sw * 2 + 1] - 1) + 2] != '#') {
                                piece[sw * 2]++;
                                piece[sw * 2 + 1]--;
                                valueble_break = 1;
                                break;
                            }
                        }
                        else {
                            SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                            printf("\aInvalid input!!Please try again. ");
                            continue;
                        }

                    }
                    if ((piece[sw * 2 + 1] - 1 >= 0) && (Board[4 * piece[sw * 2] + 2][4 * piece[sw * 2 + 1] + 2 - 2] != '#') && Board[4 * piece[sw * 2] + 2][4 * piece[sw * 2 + 1] + 2 - 4] == '.') {
                        piece[sw * 2 + 1]--;
                        valueble_break = 1;
                        break;
                    } else {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                        printf("\aError!!Can not move in that direction.Please try again.\n");
                        continue;
                    }
                } else {
                    SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                    printf("\aInvalid input!!Please try again.\n");
                    continue;
                }
            }
        } else if (option == 'W' || option == 'w' && countWalls[sw][0] > 0) { // Puting wall
            countWalls[sw][0]--;
            int rowWall, colWall;
            char direction;
            int swWallPlacement = 0;
            while (swWallPlacement == 0) {
                SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE); // user's input shown in blue
                printf("How do you want to put the walls? vertical(v) or horizontal(h)? ");
                scanf(" %c", &direction);
                if (direction == 'h' || direction == 'H') {
                    printf("Enter the coordinate of your wall:\n");
                    do {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE); // user's input shown in blue
                        scanf("%d", &rowWall);
                        int c;
                        while ((c = getchar()) != '\n' && c != EOF);
                        if (rowWall >= length - 1 || rowWall < 0) {
                            SetConsoleTextAttribute(hConsole, FOREGROUND_RED); // warning shown in red
                            printf("\aError. Invalid length. please try again\n");
                        }
                    } while ((rowWall >= length - 1  || rowWall < 0));

                    do {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE); // user's input shown in blue
                        scanf("%d", &colWall);
                        int c;
                        while ((c = getchar()) != '\n' && c != EOF);
                        if (colWall > length - 2 || colWall < 0) {
                            SetConsoleTextAttribute(hConsole, FOREGROUND_RED); // warning shown in red
                            printf("\aError. Invalid length. please try again\n");
                        }
                    } while (colWall > length - 2 || colWall < 0);

                } else if (direction == 'v' || direction == 'V') {
                    printf("Enter the coordinate of your wall:\n");

                    do {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE); //input() for V rowWall
                        scanf("%d", &rowWall);

                        int c;
                        while ((c = getchar()) != '\n' && c != EOF);

                        if (rowWall > length - 2 || rowWall < 0) {
                            SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                            printf("\aError. Invalid length. please try again\n");
                        }
                    } while (rowWall > length - 2 || rowWall < 0);

                    do {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE); //input() for V colWall
                        scanf("%d", &colWall);

                        int c;
                        while ((c = getchar()) != '\n' && c != EOF);

                        if (colWall >= length - 1 || colWall < 0) {
                            SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                            printf("\aError. Invalid length. please try again\n");
                        }
                    } while (colWall >= length - 1 || colWall < 0);

                }else{
                    continue;
                }
                if (direction == 'h' || direction == 'H') {
                    int row = 4 * (rowWall + 1);
                    int col1 = 4 * colWall + 1;
                    int col2 = 4 * (colWall + 1) + 3;
                    if (Board[row][col1] == '#' || Board[row][col2] == '#') {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                        printf("\aCan not put wall!!\n");
                        continue;
                    }
                }else if(direction == 'v' || direction == 'V') {
                    int row1 = 4 * (rowWall + 1) + 3;
                    int row2 = 4 * rowWall + 1;
                    int col = 4 * (colWall + 1);
                    if (Board[row1][col] == '#' || Board[row2][col] == '#') {
                        SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                        printf("\aCan not put wall!!\n");
                        continue;
                    }
                }
                if (isWallPlacementValid(Board, piece, sw, rowWall, colWall, direction, length)) {
                    putWalls(Board, rowWall, colWall, direction);
                    swWallPlacement = 1;
                    valueble_break = 1;
                } else {
                    SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
                    printf("\aInvalid wall placement! Try again.\n");
                    Delete(Board, rowWall, colWall, direction);
                }
            }
        }else if(countWalls[sw][0] == 0){
            SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
            printf("\aThere is no Walls.Try again please.\n");
            continue;
        }
    }
}